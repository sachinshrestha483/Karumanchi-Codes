Add 1 to a number represented as linked list
// Given List  1->2->3  
// Final Output 1->2->4

  struct Node* reverseList(struct Node *head)
      {
         Node *prev=NULL;
         Node *temp=NULL;
         Node *node=head;
         
         
         while(node!=NULL)
         {
            
            temp=node->next;
            node->next=prev;
            prev=node;
            head=node;
            node=temp;
            
         }
         
         return head;
         // code here
         // return head of reversed list
      }



      Node* addOne(Node *head) 
      {
         head=reverseList(head);
         struct Node*second=new Node(1);
         second=reverseList(second);
         struct Node*ptr=second;
         
         struct Node* newNode=new Node(1);
         
         struct Node*newPtr=newNode;
         
         int carry=0;
         while(head!=NULL||ptr!=NULL)
         {
            
            int t1=0;
            int t2=0;
            if(head==NULL){
                  t1=0;
            }
            else{
                  t1=head->data;
            }
            
            if(ptr==NULL){
                  t2=0;
            }
            else{
                  t2=ptr->data;
            }
            int tsum=t1+t2+carry;
            carry=tsum/10;
            int value=tsum%10;
            
         struct Node* newN=new Node(value);
         newPtr->next=newN;
         newPtr=newN;
         
         if(head!=NULL)
         {
            head=head->next;
         }
         if(ptr!=NULL)
         {
            ptr=ptr->next;
         }
            
            
            
            if(ptr==NULL&&head==NULL&&carry>0)
            {
            struct Node* newN=new Node(1);
               newPtr->next=newN;
               newPtr=newN;  
            }
            
            
         }
         
         newNode=newNode->next;
         newNode=reverseList(newNode);
         return newNode;
         
     
         
      }
